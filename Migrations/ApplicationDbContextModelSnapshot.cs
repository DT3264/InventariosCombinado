// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using aspnetcore_react_auth.Data;

#nullable disable

namespace aspnetcore_react_auth.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8_general_ci")
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8");

            modelBuilder.Entity("aspnetcore_react_auth.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("aspnetcore_react_auth.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("longblob");

                    b.HasKey("CategoryId");

                    b.HasIndex(new[] { "CategoryName" }, "Categories_CategoryName");

                    b.HasIndex(new[] { "CompanyId" }, "fk_categories_companies1_idx");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("aspnetcore_react_auth.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("AccountEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<sbyte>("Active")
                        .HasColumnType("tinyint");

                    b.Property<DateOnly>("BeginPlan")
                        .HasColumnType("date");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<DateOnly>("EndPlan")
                        .HasColumnType("date");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.HasKey("CompanyId");

                    b.HasIndex(new[] { "AccountEmail" }, "AccountEmail_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "CompanyName" }, "CompanyName_UNIQUE")
                        .IsUnique();

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("aspnetcore_react_auth.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("Address")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(24)
                        .HasColumnType("varchar(24)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Password")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<int?>("ReportsTo")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex(new[] { "LastName" }, "Employees_LastName");

                    b.HasIndex(new[] { "ReportsTo" }, "FK_Employees_Employees");

                    b.HasIndex(new[] { "Email" }, "UQ_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "CompanyId" }, "fk_employees_companies1_idx");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("aspnetcore_react_auth.Models.Movement", b =>
                {
                    b.Property<int>("MovementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MovementID");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasComment("Es obligatorio en caso de los movimientos por ajuste, es posible que para algún otro movimiento se use este campo para capturar algún comentario u observación importante");

                    b.Property<int>("OriginWarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("OriginWarehouseID")
                        .HasComment("Almacén al que refiere el movimiento ");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID")
                        .HasComment("Solo aplica para los movimientos de entrada por compra");

                    b.Property<int?>("TargetWarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("TargetWarehouseID")
                        .HasComment("Representa el almacen de de destino en el caso de ser un movimiento por traspaso");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("enum('COMPRA','TRASPASO','AJUSTE','VENTA')");

                    b.HasKey("MovementId");

                    b.HasIndex(new[] { "SupplierId" }, "fk_Movimientos_suppliers1_idx");

                    b.HasIndex(new[] { "OriginWarehouseId" }, "fk_Movimientos_warehouses1_idx");

                    b.HasIndex(new[] { "TargetWarehouseId" }, "fk_Movimientos_warehouses2_idx");

                    b.HasIndex(new[] { "CompanyId" }, "fk_movements_companies1_idx");

                    b.HasIndex(new[] { "EmployeeId" }, "fk_movements_employees1_idx");

                    b.ToTable("movements", (string)null);
                });

            modelBuilder.Entity("aspnetcore_react_auth.Models.Movementdetail", b =>
                {
                    b.Property<int>("MovementId")
                        .HasColumnType("int")
                        .HasColumnName("MovementID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Todos los movimientos manejaran cantidades en positivo, a excepción de los movimientos de ajuste que pueden manejar negativos, indicando así, cuando la cantidad de artículos se quiera dar de baja.");

                    b.HasKey("MovementId", "ProductId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "MovementId" }, "fk_DetallesMovimientos_Movimientos1_idx");

                    b.HasIndex(new[] { "ProductId" }, "fk_DetallesMovimientos_products1_idx");

                    b.ToTable("movementdetails", (string)null);
                });

            modelBuilder.Entity("aspnetcore_react_auth.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("QuantityPerUnit")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<double?>("UnitPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("ProductId");

                    b.HasIndex(new[] { "CategoryId" }, "Products_CategoriesProducts");

                    b.HasIndex(new[] { "ProductName" }, "Products_ProductName");

                    b.HasIndex(new[] { "SupplierId" }, "Products_SupplierID");

                    b.HasIndex(new[] { "CompanyId" }, "fk_products_companies1_idx");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("aspnetcore_react_auth.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<string>("Address")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("City")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Country")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Phone")
                        .HasMaxLength(24)
                        .HasColumnType("varchar(24)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("SupplierId");

                    b.HasIndex(new[] { "CompanyName" }, "Suppliers_CompanyName");

                    b.HasIndex(new[] { "PostalCode" }, "Suppliers_PostalCode");

                    b.HasIndex(new[] { "CompanyId" }, "fk_suppliers_companies1_idx");

                    b.ToTable("suppliers", (string)null);
                });

            modelBuilder.Entity("aspnetcore_react_auth.Models.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WarehouseID");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("WarehouseId");

                    b.HasIndex(new[] { "CompanyId" }, "fk_warehouses_companies1_idx");

                    b.ToTable("warehouses", (string)null);
                });

            modelBuilder.Entity("aspnetcore_react_auth.Models.Warehouseproduct", b =>
                {
                    b.Property<int>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("WarehouseID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<sbyte>("Discontinued")
                        .HasColumnType("tinyint");

                    b.Property<short>("ReorderLevel")
                        .HasColumnType("smallint");

                    b.Property<short>("UnitsInStock")
                        .HasColumnType("smallint");

                    b.Property<short>("UnitsOnOrder")
                        .HasColumnType("smallint");

                    b.HasKey("WarehouseId", "ProductId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "ProductId" }, "fk_WarehouseProducts_products1_idx");

                    b.ToTable("warehouseproducts", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Use")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("aspnetcore_react_auth.Models.Category", b =>
                {
                    b.HasOne("aspnetcore_react_auth.Models.Company", "Company")
                        .WithMany("Categories")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_categories_companies1");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("aspnetcore_react_auth.Models.Employee", b =>
                {
                    b.HasOne("aspnetcore_react_auth.Models.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_employees_companies1");

                    b.HasOne("aspnetcore_react_auth.Models.Employee", "ReportsToNavigation")
                        .WithMany("InverseReportsToNavigation")
                        .HasForeignKey("ReportsTo")
                        .HasConstraintName("FK_Employees_Employees");

                    b.Navigation("Company");

                    b.Navigation("ReportsToNavigation");
                });

            modelBuilder.Entity("aspnetcore_react_auth.Models.Movement", b =>
                {
                    b.HasOne("aspnetcore_react_auth.Models.Company", "Company")
                        .WithMany("Movements")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_movements_companies1");

                    b.HasOne("aspnetcore_react_auth.Models.Employee", "Employee")
                        .WithMany("Movements")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("fk_movements_employees1");

                    b.HasOne("aspnetcore_react_auth.Models.Warehouse", "OriginWarehouse")
                        .WithMany("MovementOriginWarehouses")
                        .HasForeignKey("OriginWarehouseId")
                        .IsRequired()
                        .HasConstraintName("fk_Movimientos_warehouses1");

                    b.HasOne("aspnetcore_react_auth.Models.Supplier", "Supplier")
                        .WithMany("Movements")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("fk_Movimientos_suppliers1");

                    b.HasOne("aspnetcore_react_auth.Models.Warehouse", "TargetWarehouse")
                        .WithMany("MovementTargetWarehouses")
                        .HasForeignKey("TargetWarehouseId")
                        .HasConstraintName("fk_Movimientos_warehouses2");

                    b.Navigation("Company");

                    b.Navigation("Employee");

                    b.Navigation("OriginWarehouse");

                    b.Navigation("Supplier");

                    b.Navigation("TargetWarehouse");
                });

            modelBuilder.Entity("aspnetcore_react_auth.Models.Movementdetail", b =>
                {
                    b.HasOne("aspnetcore_react_auth.Models.Movement", "Movement")
                        .WithMany("Movementdetails")
                        .HasForeignKey("MovementId")
                        .IsRequired()
                        .HasConstraintName("fk_DetallesMovimientos_Movimientos1");

                    b.HasOne("aspnetcore_react_auth.Models.Product", "Product")
                        .WithMany("Movementdetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("fk_DetallesMovimientos_products1");

                    b.Navigation("Movement");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("aspnetcore_react_auth.Models.Product", b =>
                {
                    b.HasOne("aspnetcore_react_auth.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Products_Categories");

                    b.HasOne("aspnetcore_react_auth.Models.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_products_companies1");

                    b.HasOne("aspnetcore_react_auth.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_Products_Suppliers");

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("aspnetcore_react_auth.Models.Supplier", b =>
                {
                    b.HasOne("aspnetcore_react_auth.Models.Company", "Company")
                        .WithMany("Suppliers")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_suppliers_companies1");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("aspnetcore_react_auth.Models.Warehouse", b =>
                {
                    b.HasOne("aspnetcore_react_auth.Models.Company", "Company")
                        .WithMany("Warehouses")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_warehouses_companies1");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("aspnetcore_react_auth.Models.Warehouseproduct", b =>
                {
                    b.HasOne("aspnetcore_react_auth.Models.Product", "Product")
                        .WithMany("Warehouseproducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("fk_WarehouseProducts_products1");

                    b.HasOne("aspnetcore_react_auth.Models.Warehouse", "Warehouse")
                        .WithMany("Warehouseproducts")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("fk_WarehouseProducts_warehouses");

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("aspnetcore_react_auth.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("aspnetcore_react_auth.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("aspnetcore_react_auth.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("aspnetcore_react_auth.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("aspnetcore_react_auth.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("aspnetcore_react_auth.Models.Company", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Employees");

                    b.Navigation("Movements");

                    b.Navigation("Products");

                    b.Navigation("Suppliers");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("aspnetcore_react_auth.Models.Employee", b =>
                {
                    b.Navigation("InverseReportsToNavigation");

                    b.Navigation("Movements");
                });

            modelBuilder.Entity("aspnetcore_react_auth.Models.Movement", b =>
                {
                    b.Navigation("Movementdetails");
                });

            modelBuilder.Entity("aspnetcore_react_auth.Models.Product", b =>
                {
                    b.Navigation("Movementdetails");

                    b.Navigation("Warehouseproducts");
                });

            modelBuilder.Entity("aspnetcore_react_auth.Models.Supplier", b =>
                {
                    b.Navigation("Movements");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("aspnetcore_react_auth.Models.Warehouse", b =>
                {
                    b.Navigation("MovementOriginWarehouses");

                    b.Navigation("MovementTargetWarehouses");

                    b.Navigation("Warehouseproducts");
                });
#pragma warning restore 612, 618
        }
    }
}
